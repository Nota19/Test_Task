package ru.hmel.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import ru.hmel.model.ElectroEmployee;
import ru.hmel.model.ElectroEmployeeModel;
import ru.hmel.model.ElectroEmployeeSoap;

import ru.hmel.service.persistence.ElectroEmployeePK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ElectroEmployee service. Represents a row in the &quot;store_ElectroEmployee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.hmel.model.ElectroEmployeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ElectroEmployeeImpl}.
 * </p>
 *
 * @author Hmel Max
 * @see ElectroEmployeeImpl
 * @see ru.hmel.model.ElectroEmployee
 * @see ru.hmel.model.ElectroEmployeeModel
 * @generated
 */
@JSON(strict = true)
public class ElectroEmployeeModelImpl extends BaseModelImpl<ElectroEmployee>
    implements ElectroEmployeeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a electro employee model instance should use the {@link ru.hmel.model.ElectroEmployee} interface instead.
     */
    public static final String TABLE_NAME = "store_ElectroEmployee";
    public static final Object[][] TABLE_COLUMNS = {
            { "electro_employee_id", Types.BIGINT },
            { "etype", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table store_ElectroEmployee (electro_employee_id LONG not null,etype LONG not null,primary key (electro_employee_id, etype))";
    public static final String TABLE_SQL_DROP = "drop table store_ElectroEmployee";
    public static final String ORDER_BY_JPQL = " ORDER BY electroEmployee.id.electro_employee_id ASC, electroEmployee.id.etype ASC";
    public static final String ORDER_BY_SQL = " ORDER BY store_ElectroEmployee.electro_employee_id ASC, store_ElectroEmployee.etype ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ru.hmel.model.ElectroEmployee"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ru.hmel.model.ElectroEmployee"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.ru.hmel.model.ElectroEmployee"),
            true);
    public static long ELECTRO_EMPLOYEE_ID_COLUMN_BITMASK = 1L;
    public static long ETYPE_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ru.hmel.model.ElectroEmployee"));
    private static ClassLoader _classLoader = ElectroEmployee.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ElectroEmployee.class
        };
    private long _electro_employee_id;
    private long _originalElectro_employee_id;
    private boolean _setOriginalElectro_employee_id;
    private long _etype;
    private long _originalEtype;
    private boolean _setOriginalEtype;
    private long _columnBitmask;
    private ElectroEmployee _escapedModel;

    public ElectroEmployeeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ElectroEmployee toModel(ElectroEmployeeSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ElectroEmployee model = new ElectroEmployeeImpl();

        model.setElectro_employee_id(soapModel.getElectro_employee_id());
        model.setEtype(soapModel.getEtype());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ElectroEmployee> toModels(
        ElectroEmployeeSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ElectroEmployee> models = new ArrayList<ElectroEmployee>(soapModels.length);

        for (ElectroEmployeeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public ElectroEmployeePK getPrimaryKey() {
        return new ElectroEmployeePK(_electro_employee_id, _etype);
    }

    @Override
    public void setPrimaryKey(ElectroEmployeePK primaryKey) {
        setElectro_employee_id(primaryKey.electro_employee_id);
        setEtype(primaryKey.etype);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new ElectroEmployeePK(_electro_employee_id, _etype);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((ElectroEmployeePK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return ElectroEmployee.class;
    }

    @Override
    public String getModelClassName() {
        return ElectroEmployee.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("electro_employee_id", getElectro_employee_id());
        attributes.put("etype", getEtype());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long electro_employee_id = (Long) attributes.get("electro_employee_id");

        if (electro_employee_id != null) {
            setElectro_employee_id(electro_employee_id);
        }

        Long etype = (Long) attributes.get("etype");

        if (etype != null) {
            setEtype(etype);
        }
    }

    @JSON
    @Override
    public long getElectro_employee_id() {
        return _electro_employee_id;
    }

    @Override
    public void setElectro_employee_id(long electro_employee_id) {
        _columnBitmask |= ELECTRO_EMPLOYEE_ID_COLUMN_BITMASK;

        if (!_setOriginalElectro_employee_id) {
            _setOriginalElectro_employee_id = true;

            _originalElectro_employee_id = _electro_employee_id;
        }

        _electro_employee_id = electro_employee_id;
    }

    public long getOriginalElectro_employee_id() {
        return _originalElectro_employee_id;
    }

    @JSON
    @Override
    public long getEtype() {
        return _etype;
    }

    @Override
    public void setEtype(long etype) {
        _columnBitmask |= ETYPE_COLUMN_BITMASK;

        if (!_setOriginalEtype) {
            _setOriginalEtype = true;

            _originalEtype = _etype;
        }

        _etype = etype;
    }

    public long getOriginalEtype() {
        return _originalEtype;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ElectroEmployee toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ElectroEmployee) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ElectroEmployeeImpl electroEmployeeImpl = new ElectroEmployeeImpl();

        electroEmployeeImpl.setElectro_employee_id(getElectro_employee_id());
        electroEmployeeImpl.setEtype(getEtype());

        electroEmployeeImpl.resetOriginalValues();

        return electroEmployeeImpl;
    }

    @Override
    public int compareTo(ElectroEmployee electroEmployee) {
        ElectroEmployeePK primaryKey = electroEmployee.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ElectroEmployee)) {
            return false;
        }

        ElectroEmployee electroEmployee = (ElectroEmployee) obj;

        ElectroEmployeePK primaryKey = electroEmployee.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        ElectroEmployeeModelImpl electroEmployeeModelImpl = this;

        electroEmployeeModelImpl._originalElectro_employee_id = electroEmployeeModelImpl._electro_employee_id;

        electroEmployeeModelImpl._setOriginalElectro_employee_id = false;

        electroEmployeeModelImpl._originalEtype = electroEmployeeModelImpl._etype;

        electroEmployeeModelImpl._setOriginalEtype = false;

        electroEmployeeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ElectroEmployee> toCacheModel() {
        ElectroEmployeeCacheModel electroEmployeeCacheModel = new ElectroEmployeeCacheModel();

        electroEmployeeCacheModel.electro_employee_id = getElectro_employee_id();

        electroEmployeeCacheModel.etype = getEtype();

        return electroEmployeeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{electro_employee_id=");
        sb.append(getElectro_employee_id());
        sb.append(", etype=");
        sb.append(getEtype());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("ru.hmel.model.ElectroEmployee");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>electro_employee_id</column-name><column-value><![CDATA[");
        sb.append(getElectro_employee_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>etype</column-name><column-value><![CDATA[");
        sb.append(getEtype());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
