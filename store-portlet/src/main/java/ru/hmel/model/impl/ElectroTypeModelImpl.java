package ru.hmel.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ru.hmel.model.ElectroType;
import ru.hmel.model.ElectroTypeModel;
import ru.hmel.model.ElectroTypeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ElectroType service. Represents a row in the &quot;store_ElectroType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.hmel.model.ElectroTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ElectroTypeImpl}.
 * </p>
 *
 * @author Hmel Max
 * @see ElectroTypeImpl
 * @see ru.hmel.model.ElectroType
 * @see ru.hmel.model.ElectroTypeModel
 * @generated
 */
@JSON(strict = true)
public class ElectroTypeModelImpl extends BaseModelImpl<ElectroType>
    implements ElectroTypeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a electro type model instance should use the {@link ru.hmel.model.ElectroType} interface instead.
     */
    public static final String TABLE_NAME = "store_ElectroType";
    public static final Object[][] TABLE_COLUMNS = {
            { "electro_type_id", Types.BIGINT },
            { "name", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table store_ElectroType (electro_type_id LONG not null primary key,name VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table store_ElectroType";
    public static final String ORDER_BY_JPQL = " ORDER BY electroType.electro_type_id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY store_ElectroType.electro_type_id ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ru.hmel.model.ElectroType"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ru.hmel.model.ElectroType"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ru.hmel.model.ElectroType"));
    private static ClassLoader _classLoader = ElectroType.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ElectroType.class
        };
    private long _electro_type_id;
    private String _name;
    private ElectroType _escapedModel;

    public ElectroTypeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ElectroType toModel(ElectroTypeSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ElectroType model = new ElectroTypeImpl();

        model.setElectro_type_id(soapModel.getElectro_type_id());
        model.setName(soapModel.getName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ElectroType> toModels(ElectroTypeSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ElectroType> models = new ArrayList<ElectroType>(soapModels.length);

        for (ElectroTypeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _electro_type_id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setElectro_type_id(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _electro_type_id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ElectroType.class;
    }

    @Override
    public String getModelClassName() {
        return ElectroType.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("electro_type_id", getElectro_type_id());
        attributes.put("name", getName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long electro_type_id = (Long) attributes.get("electro_type_id");

        if (electro_type_id != null) {
            setElectro_type_id(electro_type_id);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }
    }

    @JSON
    @Override
    public long getElectro_type_id() {
        return _electro_type_id;
    }

    @Override
    public void setElectro_type_id(long electro_type_id) {
        _electro_type_id = electro_type_id;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            ElectroType.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ElectroType toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ElectroType) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ElectroTypeImpl electroTypeImpl = new ElectroTypeImpl();

        electroTypeImpl.setElectro_type_id(getElectro_type_id());
        electroTypeImpl.setName(getName());

        electroTypeImpl.resetOriginalValues();

        return electroTypeImpl;
    }

    @Override
    public int compareTo(ElectroType electroType) {
        long primaryKey = electroType.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ElectroType)) {
            return false;
        }

        ElectroType electroType = (ElectroType) obj;

        long primaryKey = electroType.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ElectroType> toCacheModel() {
        ElectroTypeCacheModel electroTypeCacheModel = new ElectroTypeCacheModel();

        electroTypeCacheModel.electro_type_id = getElectro_type_id();

        electroTypeCacheModel.name = getName();

        String name = electroTypeCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            electroTypeCacheModel.name = null;
        }

        return electroTypeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{electro_type_id=");
        sb.append(getElectro_type_id());
        sb.append(", name=");
        sb.append(getName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("ru.hmel.model.ElectroType");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>electro_type_id</column-name><column-value><![CDATA[");
        sb.append(getElectro_type_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
