package ru.hmel.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ru.hmel.model.Purchase;
import ru.hmel.model.PurchaseModel;
import ru.hmel.model.PurchaseSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Purchase service. Represents a row in the &quot;store_Purchase&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.hmel.model.PurchaseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PurchaseImpl}.
 * </p>
 *
 * @author Hmel Max
 * @see PurchaseImpl
 * @see ru.hmel.model.Purchase
 * @see ru.hmel.model.PurchaseModel
 * @generated
 */
@JSON(strict = true)
public class PurchaseModelImpl extends BaseModelImpl<Purchase>
    implements PurchaseModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a purchase model instance should use the {@link ru.hmel.model.Purchase} interface instead.
     */
    public static final String TABLE_NAME = "store_Purchase";
    public static final Object[][] TABLE_COLUMNS = {
            { "purchase_id", Types.BIGINT },
            { "electro_id", Types.BIGINT },
            { "employee_id", Types.BIGINT },
            { "purchaseDate", Types.TIMESTAMP },
            { "type_", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table store_Purchase (purchase_id LONG not null primary key,electro_id LONG,employee_id LONG,purchaseDate DATE null,type_ LONG)";
    public static final String TABLE_SQL_DROP = "drop table store_Purchase";
    public static final String ORDER_BY_JPQL = " ORDER BY purchase.purchase_id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY store_Purchase.purchase_id ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ru.hmel.model.Purchase"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ru.hmel.model.Purchase"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.ru.hmel.model.Purchase"),
            true);
    public static long ELECTRO_ID_COLUMN_BITMASK = 1L;
    public static long EMPLOYEE_ID_COLUMN_BITMASK = 2L;
    public static long TYPE_COLUMN_BITMASK = 4L;
    public static long PURCHASE_ID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ru.hmel.model.Purchase"));
    private static ClassLoader _classLoader = Purchase.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Purchase.class
        };
    private long _purchase_id;
    private long _electro_id;
    private long _originalElectro_id;
    private boolean _setOriginalElectro_id;
    private long _employee_id;
    private long _originalEmployee_id;
    private boolean _setOriginalEmployee_id;
    private Date _purchaseDate;
    private long _type;
    private long _originalType;
    private boolean _setOriginalType;
    private long _columnBitmask;
    private Purchase _escapedModel;

    public PurchaseModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Purchase toModel(PurchaseSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Purchase model = new PurchaseImpl();

        model.setPurchase_id(soapModel.getPurchase_id());
        model.setElectro_id(soapModel.getElectro_id());
        model.setEmployee_id(soapModel.getEmployee_id());
        model.setPurchaseDate(soapModel.getPurchaseDate());
        model.setType(soapModel.getType());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Purchase> toModels(PurchaseSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Purchase> models = new ArrayList<Purchase>(soapModels.length);

        for (PurchaseSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _purchase_id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPurchase_id(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _purchase_id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Purchase.class;
    }

    @Override
    public String getModelClassName() {
        return Purchase.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("purchase_id", getPurchase_id());
        attributes.put("electro_id", getElectro_id());
        attributes.put("employee_id", getEmployee_id());
        attributes.put("purchaseDate", getPurchaseDate());
        attributes.put("type", getType());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long purchase_id = (Long) attributes.get("purchase_id");

        if (purchase_id != null) {
            setPurchase_id(purchase_id);
        }

        Long electro_id = (Long) attributes.get("electro_id");

        if (electro_id != null) {
            setElectro_id(electro_id);
        }

        Long employee_id = (Long) attributes.get("employee_id");

        if (employee_id != null) {
            setEmployee_id(employee_id);
        }

        Date purchaseDate = (Date) attributes.get("purchaseDate");

        if (purchaseDate != null) {
            setPurchaseDate(purchaseDate);
        }

        Long type = (Long) attributes.get("type");

        if (type != null) {
            setType(type);
        }
    }

    @JSON
    @Override
    public long getPurchase_id() {
        return _purchase_id;
    }

    @Override
    public void setPurchase_id(long purchase_id) {
        _purchase_id = purchase_id;
    }

    @JSON
    @Override
    public long getElectro_id() {
        return _electro_id;
    }

    @Override
    public void setElectro_id(long electro_id) {
        _columnBitmask |= ELECTRO_ID_COLUMN_BITMASK;

        if (!_setOriginalElectro_id) {
            _setOriginalElectro_id = true;

            _originalElectro_id = _electro_id;
        }

        _electro_id = electro_id;
    }

    public long getOriginalElectro_id() {
        return _originalElectro_id;
    }

    @JSON
    @Override
    public long getEmployee_id() {
        return _employee_id;
    }

    @Override
    public void setEmployee_id(long employee_id) {
        _columnBitmask |= EMPLOYEE_ID_COLUMN_BITMASK;

        if (!_setOriginalEmployee_id) {
            _setOriginalEmployee_id = true;

            _originalEmployee_id = _employee_id;
        }

        _employee_id = employee_id;
    }

    public long getOriginalEmployee_id() {
        return _originalEmployee_id;
    }

    @JSON
    @Override
    public Date getPurchaseDate() {
        return _purchaseDate;
    }

    @Override
    public void setPurchaseDate(Date purchaseDate) {
        _purchaseDate = purchaseDate;
    }

    @JSON
    @Override
    public long getType() {
        return _type;
    }

    @Override
    public void setType(long type) {
        _columnBitmask |= TYPE_COLUMN_BITMASK;

        if (!_setOriginalType) {
            _setOriginalType = true;

            _originalType = _type;
        }

        _type = type;
    }

    public long getOriginalType() {
        return _originalType;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Purchase.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Purchase toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Purchase) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PurchaseImpl purchaseImpl = new PurchaseImpl();

        purchaseImpl.setPurchase_id(getPurchase_id());
        purchaseImpl.setElectro_id(getElectro_id());
        purchaseImpl.setEmployee_id(getEmployee_id());
        purchaseImpl.setPurchaseDate(getPurchaseDate());
        purchaseImpl.setType(getType());

        purchaseImpl.resetOriginalValues();

        return purchaseImpl;
    }

    @Override
    public int compareTo(Purchase purchase) {
        long primaryKey = purchase.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Purchase)) {
            return false;
        }

        Purchase purchase = (Purchase) obj;

        long primaryKey = purchase.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PurchaseModelImpl purchaseModelImpl = this;

        purchaseModelImpl._originalElectro_id = purchaseModelImpl._electro_id;

        purchaseModelImpl._setOriginalElectro_id = false;

        purchaseModelImpl._originalEmployee_id = purchaseModelImpl._employee_id;

        purchaseModelImpl._setOriginalEmployee_id = false;

        purchaseModelImpl._originalType = purchaseModelImpl._type;

        purchaseModelImpl._setOriginalType = false;

        purchaseModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Purchase> toCacheModel() {
        PurchaseCacheModel purchaseCacheModel = new PurchaseCacheModel();

        purchaseCacheModel.purchase_id = getPurchase_id();

        purchaseCacheModel.electro_id = getElectro_id();

        purchaseCacheModel.employee_id = getEmployee_id();

        Date purchaseDate = getPurchaseDate();

        if (purchaseDate != null) {
            purchaseCacheModel.purchaseDate = purchaseDate.getTime();
        } else {
            purchaseCacheModel.purchaseDate = Long.MIN_VALUE;
        }

        purchaseCacheModel.type = getType();

        return purchaseCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{purchase_id=");
        sb.append(getPurchase_id());
        sb.append(", electro_id=");
        sb.append(getElectro_id());
        sb.append(", employee_id=");
        sb.append(getEmployee_id());
        sb.append(", purchaseDate=");
        sb.append(getPurchaseDate());
        sb.append(", type=");
        sb.append(getType());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("ru.hmel.model.Purchase");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>purchase_id</column-name><column-value><![CDATA[");
        sb.append(getPurchase_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>electro_id</column-name><column-value><![CDATA[");
        sb.append(getElectro_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employee_id</column-name><column-value><![CDATA[");
        sb.append(getEmployee_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>purchaseDate</column-name><column-value><![CDATA[");
        sb.append(getPurchaseDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
