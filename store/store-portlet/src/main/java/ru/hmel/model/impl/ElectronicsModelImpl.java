package ru.hmel.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ru.hmel.model.Electronics;
import ru.hmel.model.ElectronicsModel;
import ru.hmel.model.ElectronicsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Electronics service. Represents a row in the &quot;store_Electronics&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.hmel.model.ElectronicsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ElectronicsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ElectronicsImpl
 * @see ru.hmel.model.Electronics
 * @see ru.hmel.model.ElectronicsModel
 * @generated
 */
@JSON(strict = true)
public class ElectronicsModelImpl extends BaseModelImpl<Electronics>
    implements ElectronicsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a electronics model instance should use the {@link ru.hmel.model.Electronics} interface instead.
     */
    public static final String TABLE_NAME = "store_Electronics";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "electronics_id", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "etype", Types.BIGINT },
            { "price", Types.BIGINT },
            { "count", Types.BIGINT },
            { "inStock", Types.BOOLEAN },
            { "archive", Types.BOOLEAN },
            { "description", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table store_Electronics (uuid_ VARCHAR(75) null,electronics_id LONG not null primary key,name VARCHAR(75) null,etype LONG,price LONG,count LONG,inStock BOOLEAN,archive BOOLEAN,description VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table store_Electronics";
    public static final String ORDER_BY_JPQL = " ORDER BY electronics.electronics_id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY store_Electronics.electronics_id ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ru.hmel.model.Electronics"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ru.hmel.model.Electronics"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.ru.hmel.model.Electronics"),
            true);
    public static long ETYPE_COLUMN_BITMASK = 1L;
    public static long UUID_COLUMN_BITMASK = 2L;
    public static long ELECTRONICS_ID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ru.hmel.model.Electronics"));
    private static ClassLoader _classLoader = Electronics.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Electronics.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _electronics_id;
    private String _name;
    private long _etype;
    private long _originalEtype;
    private boolean _setOriginalEtype;
    private long _price;
    private long _count;
    private boolean _inStock;
    private boolean _archive;
    private String _description;
    private long _columnBitmask;
    private Electronics _escapedModel;

    public ElectronicsModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Electronics toModel(ElectronicsSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Electronics model = new ElectronicsImpl();

        model.setUuid(soapModel.getUuid());
        model.setElectronics_id(soapModel.getElectronics_id());
        model.setName(soapModel.getName());
        model.setEtype(soapModel.getEtype());
        model.setPrice(soapModel.getPrice());
        model.setCount(soapModel.getCount());
        model.setInStock(soapModel.getInStock());
        model.setArchive(soapModel.getArchive());
        model.setDescription(soapModel.getDescription());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Electronics> toModels(ElectronicsSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Electronics> models = new ArrayList<Electronics>(soapModels.length);

        for (ElectronicsSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _electronics_id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setElectronics_id(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _electronics_id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Electronics.class;
    }

    @Override
    public String getModelClassName() {
        return Electronics.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("electronics_id", getElectronics_id());
        attributes.put("name", getName());
        attributes.put("etype", getEtype());
        attributes.put("price", getPrice());
        attributes.put("count", getCount());
        attributes.put("inStock", getInStock());
        attributes.put("archive", getArchive());
        attributes.put("description", getDescription());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long electronics_id = (Long) attributes.get("electronics_id");

        if (electronics_id != null) {
            setElectronics_id(electronics_id);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Long etype = (Long) attributes.get("etype");

        if (etype != null) {
            setEtype(etype);
        }

        Long price = (Long) attributes.get("price");

        if (price != null) {
            setPrice(price);
        }

        Long count = (Long) attributes.get("count");

        if (count != null) {
            setCount(count);
        }

        Boolean inStock = (Boolean) attributes.get("inStock");

        if (inStock != null) {
            setInStock(inStock);
        }

        Boolean archive = (Boolean) attributes.get("archive");

        if (archive != null) {
            setArchive(archive);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    @Override
    public long getElectronics_id() {
        return _electronics_id;
    }

    @Override
    public void setElectronics_id(long electronics_id) {
        _electronics_id = electronics_id;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public long getEtype() {
        return _etype;
    }

    @Override
    public void setEtype(long etype) {
        _columnBitmask |= ETYPE_COLUMN_BITMASK;

        if (!_setOriginalEtype) {
            _setOriginalEtype = true;

            _originalEtype = _etype;
        }

        _etype = etype;
    }

    public long getOriginalEtype() {
        return _originalEtype;
    }

    @JSON
    @Override
    public long getPrice() {
        return _price;
    }

    @Override
    public void setPrice(long price) {
        _price = price;
    }

    @JSON
    @Override
    public long getCount() {
        return _count;
    }

    @Override
    public void setCount(long count) {
        _count = count;
    }

    @JSON
    @Override
    public boolean getInStock() {
        return _inStock;
    }

    @Override
    public boolean isInStock() {
        return _inStock;
    }

    @Override
    public void setInStock(boolean inStock) {
        _inStock = inStock;
    }

    @JSON
    @Override
    public boolean getArchive() {
        return _archive;
    }

    @Override
    public boolean isArchive() {
        return _archive;
    }

    @Override
    public void setArchive(boolean archive) {
        _archive = archive;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Electronics.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Electronics toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Electronics) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ElectronicsImpl electronicsImpl = new ElectronicsImpl();

        electronicsImpl.setUuid(getUuid());
        electronicsImpl.setElectronics_id(getElectronics_id());
        electronicsImpl.setName(getName());
        electronicsImpl.setEtype(getEtype());
        electronicsImpl.setPrice(getPrice());
        electronicsImpl.setCount(getCount());
        electronicsImpl.setInStock(getInStock());
        electronicsImpl.setArchive(getArchive());
        electronicsImpl.setDescription(getDescription());

        electronicsImpl.resetOriginalValues();

        return electronicsImpl;
    }

    @Override
    public int compareTo(Electronics electronics) {
        long primaryKey = electronics.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Electronics)) {
            return false;
        }

        Electronics electronics = (Electronics) obj;

        long primaryKey = electronics.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ElectronicsModelImpl electronicsModelImpl = this;

        electronicsModelImpl._originalUuid = electronicsModelImpl._uuid;

        electronicsModelImpl._originalEtype = electronicsModelImpl._etype;

        electronicsModelImpl._setOriginalEtype = false;

        electronicsModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Electronics> toCacheModel() {
        ElectronicsCacheModel electronicsCacheModel = new ElectronicsCacheModel();

        electronicsCacheModel.uuid = getUuid();

        String uuid = electronicsCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            electronicsCacheModel.uuid = null;
        }

        electronicsCacheModel.electronics_id = getElectronics_id();

        electronicsCacheModel.name = getName();

        String name = electronicsCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            electronicsCacheModel.name = null;
        }

        electronicsCacheModel.etype = getEtype();

        electronicsCacheModel.price = getPrice();

        electronicsCacheModel.count = getCount();

        electronicsCacheModel.inStock = getInStock();

        electronicsCacheModel.archive = getArchive();

        electronicsCacheModel.description = getDescription();

        String description = electronicsCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            electronicsCacheModel.description = null;
        }

        return electronicsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", electronics_id=");
        sb.append(getElectronics_id());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", etype=");
        sb.append(getEtype());
        sb.append(", price=");
        sb.append(getPrice());
        sb.append(", count=");
        sb.append(getCount());
        sb.append(", inStock=");
        sb.append(getInStock());
        sb.append(", archive=");
        sb.append(getArchive());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("ru.hmel.model.Electronics");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>electronics_id</column-name><column-value><![CDATA[");
        sb.append(getElectronics_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>etype</column-name><column-value><![CDATA[");
        sb.append(getEtype());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>price</column-name><column-value><![CDATA[");
        sb.append(getPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>count</column-name><column-value><![CDATA[");
        sb.append(getCount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inStock</column-name><column-value><![CDATA[");
        sb.append(getInStock());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>archive</column-name><column-value><![CDATA[");
        sb.append(getArchive());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
