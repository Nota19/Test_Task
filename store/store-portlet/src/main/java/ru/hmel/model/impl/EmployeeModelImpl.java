package ru.hmel.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ru.hmel.model.Employee;
import ru.hmel.model.EmployeeModel;
import ru.hmel.model.EmployeeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;store_Employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.hmel.model.EmployeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeImpl
 * @see ru.hmel.model.Employee
 * @see ru.hmel.model.EmployeeModel
 * @generated
 */
@JSON(strict = true)
public class EmployeeModelImpl extends BaseModelImpl<Employee>
    implements EmployeeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a employee model instance should use the {@link ru.hmel.model.Employee} interface instead.
     */
    public static final String TABLE_NAME = "store_Employee";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "employee_id", Types.BIGINT },
            { "lastname", Types.VARCHAR },
            { "firstname", Types.VARCHAR },
            { "patronymic", Types.VARCHAR },
            { "birthdate", Types.TIMESTAMP },
            { "position", Types.BIGINT },
            { "gender", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table store_Employee (uuid_ VARCHAR(75) null,employee_id LONG not null primary key,lastname VARCHAR(75) null,firstname VARCHAR(75) null,patronymic VARCHAR(75) null,birthdate DATE null,position LONG,gender BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table store_Employee";
    public static final String ORDER_BY_JPQL = " ORDER BY employee.employee_id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY store_Employee.employee_id ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ru.hmel.model.Employee"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ru.hmel.model.Employee"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.ru.hmel.model.Employee"),
            true);
    public static long POSITION_COLUMN_BITMASK = 1L;
    public static long UUID_COLUMN_BITMASK = 2L;
    public static long EMPLOYEE_ID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ru.hmel.model.Employee"));
    private static ClassLoader _classLoader = Employee.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Employee.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _employee_id;
    private String _lastname;
    private String _firstname;
    private String _patronymic;
    private Date _birthdate;
    private long _position;
    private long _originalPosition;
    private boolean _setOriginalPosition;
    private boolean _gender;
    private long _columnBitmask;
    private Employee _escapedModel;

    public EmployeeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Employee toModel(EmployeeSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Employee model = new EmployeeImpl();

        model.setUuid(soapModel.getUuid());
        model.setEmployee_id(soapModel.getEmployee_id());
        model.setLastname(soapModel.getLastname());
        model.setFirstname(soapModel.getFirstname());
        model.setPatronymic(soapModel.getPatronymic());
        model.setBirthdate(soapModel.getBirthdate());
        model.setPosition(soapModel.getPosition());
        model.setGender(soapModel.getGender());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Employee> toModels(EmployeeSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Employee> models = new ArrayList<Employee>(soapModels.length);

        for (EmployeeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _employee_id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setEmployee_id(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _employee_id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Employee.class;
    }

    @Override
    public String getModelClassName() {
        return Employee.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("employee_id", getEmployee_id());
        attributes.put("lastname", getLastname());
        attributes.put("firstname", getFirstname());
        attributes.put("patronymic", getPatronymic());
        attributes.put("birthdate", getBirthdate());
        attributes.put("position", getPosition());
        attributes.put("gender", getGender());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long employee_id = (Long) attributes.get("employee_id");

        if (employee_id != null) {
            setEmployee_id(employee_id);
        }

        String lastname = (String) attributes.get("lastname");

        if (lastname != null) {
            setLastname(lastname);
        }

        String firstname = (String) attributes.get("firstname");

        if (firstname != null) {
            setFirstname(firstname);
        }

        String patronymic = (String) attributes.get("patronymic");

        if (patronymic != null) {
            setPatronymic(patronymic);
        }

        Date birthdate = (Date) attributes.get("birthdate");

        if (birthdate != null) {
            setBirthdate(birthdate);
        }

        Long position = (Long) attributes.get("position");

        if (position != null) {
            setPosition(position);
        }

        Boolean gender = (Boolean) attributes.get("gender");

        if (gender != null) {
            setGender(gender);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    @Override
    public long getEmployee_id() {
        return _employee_id;
    }

    @Override
    public void setEmployee_id(long employee_id) {
        _employee_id = employee_id;
    }

    @JSON
    @Override
    public String getLastname() {
        if (_lastname == null) {
            return StringPool.BLANK;
        } else {
            return _lastname;
        }
    }

    @Override
    public void setLastname(String lastname) {
        _lastname = lastname;
    }

    @JSON
    @Override
    public String getFirstname() {
        if (_firstname == null) {
            return StringPool.BLANK;
        } else {
            return _firstname;
        }
    }

    @Override
    public void setFirstname(String firstname) {
        _firstname = firstname;
    }

    @JSON
    @Override
    public String getPatronymic() {
        if (_patronymic == null) {
            return StringPool.BLANK;
        } else {
            return _patronymic;
        }
    }

    @Override
    public void setPatronymic(String patronymic) {
        _patronymic = patronymic;
    }

    @JSON
    @Override
    public Date getBirthdate() {
        return _birthdate;
    }

    @Override
    public void setBirthdate(Date birthdate) {
        _birthdate = birthdate;
    }

    @JSON
    @Override
    public long getPosition() {
        return _position;
    }

    @Override
    public void setPosition(long position) {
        _columnBitmask |= POSITION_COLUMN_BITMASK;

        if (!_setOriginalPosition) {
            _setOriginalPosition = true;

            _originalPosition = _position;
        }

        _position = position;
    }

    public long getOriginalPosition() {
        return _originalPosition;
    }

    @JSON
    @Override
    public boolean getGender() {
        return _gender;
    }

    @Override
    public boolean isGender() {
        return _gender;
    }

    @Override
    public void setGender(boolean gender) {
        _gender = gender;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Employee.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Employee toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Employee) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EmployeeImpl employeeImpl = new EmployeeImpl();

        employeeImpl.setUuid(getUuid());
        employeeImpl.setEmployee_id(getEmployee_id());
        employeeImpl.setLastname(getLastname());
        employeeImpl.setFirstname(getFirstname());
        employeeImpl.setPatronymic(getPatronymic());
        employeeImpl.setBirthdate(getBirthdate());
        employeeImpl.setPosition(getPosition());
        employeeImpl.setGender(getGender());

        employeeImpl.resetOriginalValues();

        return employeeImpl;
    }

    @Override
    public int compareTo(Employee employee) {
        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Employee)) {
            return false;
        }

        Employee employee = (Employee) obj;

        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EmployeeModelImpl employeeModelImpl = this;

        employeeModelImpl._originalUuid = employeeModelImpl._uuid;

        employeeModelImpl._originalPosition = employeeModelImpl._position;

        employeeModelImpl._setOriginalPosition = false;

        employeeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Employee> toCacheModel() {
        EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

        employeeCacheModel.uuid = getUuid();

        String uuid = employeeCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            employeeCacheModel.uuid = null;
        }

        employeeCacheModel.employee_id = getEmployee_id();

        employeeCacheModel.lastname = getLastname();

        String lastname = employeeCacheModel.lastname;

        if ((lastname != null) && (lastname.length() == 0)) {
            employeeCacheModel.lastname = null;
        }

        employeeCacheModel.firstname = getFirstname();

        String firstname = employeeCacheModel.firstname;

        if ((firstname != null) && (firstname.length() == 0)) {
            employeeCacheModel.firstname = null;
        }

        employeeCacheModel.patronymic = getPatronymic();

        String patronymic = employeeCacheModel.patronymic;

        if ((patronymic != null) && (patronymic.length() == 0)) {
            employeeCacheModel.patronymic = null;
        }

        Date birthdate = getBirthdate();

        if (birthdate != null) {
            employeeCacheModel.birthdate = birthdate.getTime();
        } else {
            employeeCacheModel.birthdate = Long.MIN_VALUE;
        }

        employeeCacheModel.position = getPosition();

        employeeCacheModel.gender = getGender();

        return employeeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", employee_id=");
        sb.append(getEmployee_id());
        sb.append(", lastname=");
        sb.append(getLastname());
        sb.append(", firstname=");
        sb.append(getFirstname());
        sb.append(", patronymic=");
        sb.append(getPatronymic());
        sb.append(", birthdate=");
        sb.append(getBirthdate());
        sb.append(", position=");
        sb.append(getPosition());
        sb.append(", gender=");
        sb.append(getGender());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("ru.hmel.model.Employee");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employee_id</column-name><column-value><![CDATA[");
        sb.append(getEmployee_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastname</column-name><column-value><![CDATA[");
        sb.append(getLastname());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstname</column-name><column-value><![CDATA[");
        sb.append(getFirstname());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>patronymic</column-name><column-value><![CDATA[");
        sb.append(getPatronymic());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>birthdate</column-name><column-value><![CDATA[");
        sb.append(getBirthdate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>position</column-name><column-value><![CDATA[");
        sb.append(getPosition());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>gender</column-name><column-value><![CDATA[");
        sb.append(getGender());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
